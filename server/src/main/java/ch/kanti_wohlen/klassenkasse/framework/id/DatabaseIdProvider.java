package ch.kanti_wohlen.klassenkasse.framework.id;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

import javax.annotation.concurrent.ThreadSafe;

import ch.kanti_wohlen.klassenkasse.database.ActionsSection;
import ch.kanti_wohlen.klassenkasse.database.ClassesSection;
import ch.kanti_wohlen.klassenkasse.database.Database;
import ch.kanti_wohlen.klassenkasse.database.PaymentsSection;
import ch.kanti_wohlen.klassenkasse.database.UsersSection;

/**
 * Creates new IDs for storing objects in the database.
 * <p>
 * Classes, users, payments and actions all have separate IDs. The start indices are generated by looking up the current
 * maximum ID of the tables. On an empty database, indices start at 1 and increase from there on.
 * </p>
 * <p>
 * Classes, users and payments have IDs of type Integer; actions have IDs of type Long.
 * </p>
 * 
 * @author Roger Baumgartner
 */
@ThreadSafe
public class DatabaseIdProvider implements IdProvider {

	private AtomicInteger classId;
	private AtomicInteger userId;
	private AtomicInteger paymentId;
	private AtomicLong actionId;

	public DatabaseIdProvider(Database database) throws SQLException {
		try (Statement st = database.openConnection().createStatement()) {
			classId = new AtomicInteger(getMaximum(st, "\"classID\"", ClassesSection.SQL_NAME).getInt(1));
			userId = new AtomicInteger(getMaximum(st, "\"userID\"", UsersSection.SQL_NAME).getInt(1));
			paymentId = new AtomicInteger(getMaximum(st, "\"paymentID\"", PaymentsSection.SQL_NAME).getInt(1));
			actionId = new AtomicLong(getMaximum(st, "\"actionID\"", ActionsSection.SQL_NAME).getLong(1));
		}
	}

	private ResultSet getMaximum(Statement statement, String columnIdName, String tableName) throws SQLException {
		ResultSet result = statement.executeQuery("SELECT Max(" + columnIdName + ") FROM " + tableName);
		result.next();
		return result;
	}

	@Override
	public int generateClassId() {
		return classId.incrementAndGet();
	}

	@Override
	public int generateUserId() {
		return userId.incrementAndGet();
	}

	@Override
	public int generatePaymentId() {
		return paymentId.incrementAndGet();
	}

	@Override
	public long generateActionId() {
		return actionId.incrementAndGet();
	}
}

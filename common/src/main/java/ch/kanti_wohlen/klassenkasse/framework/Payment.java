package ch.kanti_wohlen.klassenkasse.framework;

import java.util.Date;

import org.eclipse.jdt.annotation.Nullable;

import ch.kanti_wohlen.klassenkasse.util.MonetaryValue;

/**
 * Represents a Payment that influences the balance of a {@link User} and its {@link StudentClass}.
 * 
 * <p>
 * A {@code Payment} is made up of its date, a description, its {@link MonetaryValue} and the rounding value it caused.
 * </p>
 */
public final class Payment implements LocallyIdentifiable<Integer> {

	private final int id;

	private Date date;
	private String description;
	private MonetaryValue value;
	private MonetaryValue rounding;

	/**
	 * Creates a new {@link Payment} with an ID generated by a {@link Host}.
	 * 
	 * @param host
	 *            the host which is used to generate a new {@code Payment} ID,
	 *            cannot be {@code null}
	 * @param date
	 *            the {@link Date} of this payment.
	 *            Can be any date in the future or the past, but not {@code null}
	 * @param description
	 *            the description of this payment
	 * @param value
	 *            the {@link MonetaryValue} of this payment
	 * @param rounding
	 *            the cumulative rounding difference this payment caused
	 */
	public Payment(Host host, Date date, String description, MonetaryValue value, MonetaryValue rounding) {
		id = host.getIdProvider().generatePaymentId();
		this.date = date;
		this.description = description;
		this.value = value;
		this.rounding = rounding;
	}

	/**
	 * Creates a {@link Payment} with a given ID.
	 * <p>
	 * Use this constructor when loading a {@code Payment} from stored data or similar.
	 * </p>
	 * 
	 * @param id
	 *            the local ID to be set
	 * @param date
	 *            the {@link Date} of this payment.
	 *            Can be any date in the future or the past, but not {@code null}
	 * @param description
	 *            the description of this payment
	 * @param value
	 *            the {@link MonetaryValue} of this payment
	 * @param rounding
	 *            the cumulative rounding difference this payment caused
	 */
	public Payment(int id, Date date, String description, MonetaryValue value, MonetaryValue rounding) {
		this.id = id;
		this.date = date;
		this.description = description;
		this.value = value;
		this.rounding = rounding;
	}

	@SuppressWarnings("null")
	@Override
	public Integer getLocalId() {
		return id;
	}

	/**
	 * Gets the {@link Date} of this {@link Payment}.
	 * 
	 * @return the date, will never be {@code null}
	 */
	public Date getDate() {
		return date;
	}

	/**
	 * Sets the {@link Date} of this {@link Payment} to a new value.
	 * 
	 * @param newDate
	 *            the date to be set, cannot be {@code null}
	 */
	public void setDate(Date newDate) {
		date = newDate;
	}

	/**
	 * Gets this {@link Payment}'s description.
	 * 
	 * @return the description, will never be {@code null}.
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * Sets the description of this {@link Payment}.
	 * 
	 * @param newDescription
	 *            the description to be set, cannot be {@code null} or empty.
	 */
	public void setDescription(String newDescription) {
		if (newDescription.isEmpty()) {
			throw new IllegalArgumentException("Description cannot be an empty String.");
		}
		description = newDescription;
	}

	/**
	 * Gets the {@link MonetaryValue} of this {@link Payment}.
	 * 
	 * @return the value, will never be {@code null}.
	 */
	public MonetaryValue getValue() {
		return value;
	}

	/**
	 * Sets the new value of this {@link Payment}.
	 * 
	 * @param newValue
	 *            the value to be set, cannot be {@code null}
	 */
	public void setValue(MonetaryValue newValue) {
		value = newValue;
	}

	/**
	 * Gets the cumulative rounding error this {@link Payment} caused.
	 * 
	 * @return the rounding value, will never be {@code null}
	 */
	public MonetaryValue getRoundingValue() {
		return rounding;
	}

	/**
	 * Sets the rounding value of this {@link Payment}.
	 * 
	 * @param newRoundingValue
	 *            the rounding value to be set, cannot be {@code null}
	 */
	public void setRoundingValue(MonetaryValue newRoundingValue) {
		rounding = newRoundingValue;
	}

	@Override
	public boolean equals(@Nullable Object obj) {
		if (obj instanceof Payment) {
			return id == ((Payment) obj).id;
		} else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return id;
	}
}

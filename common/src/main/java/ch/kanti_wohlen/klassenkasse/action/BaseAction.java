package ch.kanti_wohlen.klassenkasse.action;

import java.util.Date;

import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;

import ch.kanti_wohlen.klassenkasse.framework.Host;
import ch.kanti_wohlen.klassenkasse.framework.LocallyIdentifiable;
import ch.kanti_wohlen.klassenkasse.framework.User;
import ch.kanti_wohlen.klassenkasse.framework.id.IdProvider;

@NonNullByDefault
public final class BaseAction implements LocallyIdentifiable<Long> {

	public static final int PROTOCOL_HEADER = 11;
	public static final int PROTOCOL_FOOTER = 1;
	public static final int PROTOCOL_OVERHEAD = PROTOCOL_HEADER + PROTOCOL_FOOTER;

	protected final Action action;

	protected final long id;
	protected final int creatorId;
	protected final Date date;

	protected boolean applied;

	/**
	 * Creates a new {@link BaseAction} with an ID generated by the {@link Host}'s {@link IdProvider}.
	 * 
	 * @param host
	 *            the {@code Host}, not {@code null}
	 */
	public BaseAction(Action action, Host host) {
		this.action = action;

		this.id = host.getIdProvider().generateActionId();
		User loggedInUser = host.getLoggedInUser();
		this.creatorId = (loggedInUser != null) ? loggedInUser.getLocalId() : 0;
		this.date = new Date();

		this.applied = false;
	}

	/**
	 * Creates an {@link BaseAction} with a given ID.
	 * 
	 * @param id
	 *            this {@code BaseAction}'s ID
	 * @param creatorId
	 *            the ID of the {@link User} who originally created this {@code BaseAction}
	 * @param date
	 *            the {@link Date} when this {@code BaseAction} was created
	 * @param applied
	 *            whether the {@code BaseAction} was already applied
	 */
	public BaseAction(Action action, long id, int creatorId, Date date, boolean applied) {
		this.action = action;

		this.id = id;
		this.creatorId = creatorId;
		this.date = date;

		this.applied = applied;
	}

	@SuppressWarnings("null")
	public Long getLocalId() {
		return id;
	}

	public Action getAction() {
		return action;
	}

	public int getCreatorId() {
		return creatorId;
	}

	public @Nullable User getCreator(Host host) {
		return host.getUserById(creatorId);
	}

	public Date getCreationDate() {
		return date;
	}

	public boolean isApplied() {
		return applied;
	}

	public boolean isUndone() {
		return !applied;
	}

	protected static final <T> T assertNotNull(@Nullable T object) {
		if (object == null) {
			throw new IllegalStateException("Parameter was null.");
		}
		return object;
	}

	public final void apply(Host host) {
		checkState(false);
		action.update(host, true);
		applied = true;
	}

	public final void undo(Host host) {
		checkState(true);
		action.update(host, false);
		applied = false;
	}

	private void checkState(boolean wantedState) {
		if (applied != wantedState) {
			if (applied) {
				throw new IllegalStateException("BaseAction was already applied.");
			} else {
				throw new IllegalStateException("BaseAction has not been applied yet.");
			}
		}
	}
}
